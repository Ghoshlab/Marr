// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// seqen
NumericVector seqen(int n);
RcppExport SEXP _Marr_seqen(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(seqen(n));
    return rcpp_result_gen;
END_RCPP
}
// reptest2
NumericVector reptest2(int x, int y);
RcppExport SEXP _Marr_reptest2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(reptest2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cumsumSS
NumericVector cumsumSS(NumericVector x);
RcppExport SEXP _Marr_cumsumSS(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsumSS(x));
    return rcpp_result_gen;
END_RCPP
}
// subset_range1
NumericVector subset_range1(NumericVector x, int start, int end);
RcppExport SEXP _Marr_subset_range1(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_range1(x, start, end));
    return rcpp_result_gen;
END_RCPP
}
// sapplySSS
NumericVector sapplySSS(NumericVector xx);
RcppExport SEXP _Marr_sapplySSS(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(sapplySSS(xx));
    return rcpp_result_gen;
END_RCPP
}
// getSS
NumericVector getSS(NumericVector maxRank);
RcppExport SEXP _Marr_getSS(SEXP maxRankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type maxRank(maxRankSEXP);
    rcpp_result_gen = Rcpp::wrap(getSS(maxRank));
    return rcpp_result_gen;
END_RCPP
}
// seqenkhat
NumericVector seqenkhat(int n, int k);
RcppExport SEXP _Marr_seqenkhat(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(seqenkhat(n, k));
    return rcpp_result_gen;
END_RCPP
}
// sapplykhat
NumericVector sapplykhat(int khat, NumericVector maxRank);
RcppExport SEXP _Marr_sapplykhat(SEXP khatSEXP, SEXP maxRankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type khat(khatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxRank(maxRankSEXP);
    rcpp_result_gen = Rcpp::wrap(sapplykhat(khat, maxRank));
    return rcpp_result_gen;
END_RCPP
}
// RNhatcpp
IntegerVector RNhatcpp(int khat, NumericVector maxRank);
RcppExport SEXP _Marr_RNhatcpp(SEXP khatSEXP, SEXP maxRankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type khat(khatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxRank(maxRankSEXP);
    rcpp_result_gen = Rcpp::wrap(RNhatcpp(khat, maxRank));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Marr_seqen", (DL_FUNC) &_Marr_seqen, 1},
    {"_Marr_reptest2", (DL_FUNC) &_Marr_reptest2, 2},
    {"_Marr_cumsumSS", (DL_FUNC) &_Marr_cumsumSS, 1},
    {"_Marr_subset_range1", (DL_FUNC) &_Marr_subset_range1, 3},
    {"_Marr_sapplySSS", (DL_FUNC) &_Marr_sapplySSS, 1},
    {"_Marr_getSS", (DL_FUNC) &_Marr_getSS, 1},
    {"_Marr_seqenkhat", (DL_FUNC) &_Marr_seqenkhat, 2},
    {"_Marr_sapplykhat", (DL_FUNC) &_Marr_sapplykhat, 2},
    {"_Marr_RNhatcpp", (DL_FUNC) &_Marr_RNhatcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Marr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
